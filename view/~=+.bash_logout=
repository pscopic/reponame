let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <S-F1> :call BASH_help()
imap <buffer> <silent> <F9> :call BASH_Debugger():redraw!
imap <buffer> <silent> <S-F9> :call BASH_CmdLineArguments()
imap <buffer> <silent> <C-F9> :call BASH_Run("n")
imap <buffer> <silent> <M-F9> :call BASH_SyntaxCheck()
vmap <buffer> <silent> \rh :call BASH_Hardcopy("v")
nmap <buffer> <silent> \rh :call BASH_Hardcopy("n")
map <buffer> <silent> \ro :call BASH_Toggle_Gvim_Xterm()
map <buffer> <silent> \rs :call BASH_Settings()
map <buffer> <silent> \rd :call BASH_Debugger():redraw!
map <buffer> <silent> \ra :call BASH_CmdLineArguments()
map <buffer> <silent> \rc :call BASH_SyntaxCheck()
vmap <buffer> <silent> \rr :call BASH_Run("v")
nmap <buffer> <silent> \rr :call BASH_Run("n")
nmap <buffer> <silent> \re :call BASH_MakeScriptExecutable()
noremap <buffer> <silent> \ne :call BASH_CodeSnippets("e")
vnoremap <buffer> <silent> \nw :call BASH_CodeSnippets("wv")
nnoremap <buffer> <silent> \nw :call BASH_CodeSnippets("w")
onoremap <buffer> <silent> \nw :call BASH_CodeSnippets("w")
noremap <buffer> <silent> \nr :call BASH_CodeSnippets("r")
vnoremap <buffer> <silent> \se secho -e "\n"2hP
nnoremap <buffer> <silent> \se ^iecho -e "\n"2hi
vnoremap <buffer> <silent> \sfu :call BASH_CodeFunction("v")
nnoremap <buffer> <silent> \sfu :call BASH_CodeFunction("a")O
vnoremap <buffer> <silent> \sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "v" )
nnoremap <buffer> <silent> \sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "a" )i
vnoremap <buffer> <silent> \st :call BASH_FlowControl( "until _ ",     "do",   "done",     "v" )
nnoremap <buffer> <silent> \st :call BASH_FlowControl( "until _ ",     "do",   "done",     "a" )i
vnoremap <buffer> <silent> \ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "v" )
nnoremap <buffer> <silent> \ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "a" )i
vnoremap <buffer> <silent> \sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "v" )
nnoremap <buffer> <silent> \sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "a" )i
vnoremap <buffer> <silent> \si :call BASH_FlowControl( "if _ ",        "then", "fi",       "v" )
nnoremap <buffer> <silent> \si :call BASH_FlowControl( "if _ ",        "then", "fi",       "a" )i
vnoremap <buffer> <silent> \sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "v" )
nnoremap <buffer> <silent> \sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "a" )i
nnoremap <buffer> <silent> \sl oelif then1kA
nnoremap <buffer> <silent> \sc ocase  in);;);;*);;esac    # --- end of case ---11kf a
nnoremap <buffer> <silent> \cv :call BASH_CommentVimModeline()
nnoremap <buffer> <silent> \cr 0:s/^\s*echo\s\+\"// | s/\s*\"\s*$// | :normal ==j'
nnoremap <buffer> <silent> \ce ^iecho "$a"j'
nnoremap <buffer> <silent> \ckn $:call BASH_CommentClassified("")        kJf:a
nnoremap <buffer> <silent> \ckw $:call BASH_CommentClassified("WARNING") kJA
nnoremap <buffer> <silent> \ckr $:call BASH_CommentClassified("TRICKY")  kJA
nnoremap <buffer> <silent> \ckt $:call BASH_CommentClassified("TODO")    kJA
nnoremap <buffer> <silent> \ckb $:call BASH_CommentClassified("BUG")     kJA
nnoremap <buffer> <silent> \ct a=BASH_InsertDateAndTime('dt')
nnoremap <buffer> <silent> \cd a=BASH_InsertDateAndTime('d')
nnoremap <buffer> <silent> \co :'<,'>s/^\\(\\s*\\)#/\\1/:nohlsearchj"
vnoremap <buffer> <silent> \cc :'<,'>s/^/\#/:nohlsearchj"
nnoremap <buffer> <silent> \cc :s/^/\#/:nohlsearchj"
vnoremap <buffer> <silent> \co :'<,'>s/^#//:nohlsearch
nnoremap <buffer> <silent> \ch :call BASH_CommentTemplates('header')
nnoremap <buffer> <silent> \cfu :call BASH_CommentTemplates('function')
nnoremap <buffer> <silent> \cfr :call BASH_CommentTemplates('frame')
nnoremap <buffer> <silent> \cs :call BASH_GetLineEndCommCol()
vnoremap <buffer> <silent> \cj :call BASH_AdjustLineEndComm("v")
nnoremap <buffer> <silent> \cj :call BASH_AdjustLineEndComm("a")
vnoremap <buffer> <silent> \cl :call BASH_MultiLineEndComments()A
nnoremap <buffer> <silent> \cl :call BASH_LineEndComment()A
map <buffer> <silent> \h :call BASH_help()
map <buffer> <silent> <S-F1> :call BASH_help()
map <buffer> <silent> <F9> :call BASH_Debugger():redraw!
map <buffer> <silent> <S-F9> :call BASH_CmdLineArguments()
nmap <buffer> <silent> <C-F9> :call BASH_Run("n")
vmap <buffer> <silent> <C-F9> :call BASH_Run("v")
map <buffer> <silent> <M-F9> :call BASH_SyntaxCheck()
inoremap <buffer> <silent> \se echo -e "\n"2hi
inoremap <buffer> <silent> \sfu :call BASH_CodeFunction("a")O
inoremap <buffer> <silent> \sw :call BASH_FlowControl( "while _ ",     "do",   "done",     "a" )i
inoremap <buffer> <silent> \st :call BASH_FlowControl( "until _ ",     "do",   "done",     "a" )i
inoremap <buffer> <silent> \ss :call BASH_FlowControl( "select _ in ", "do",   "done",     "a" )i
inoremap <buffer> <silent> \sie :call BASH_FlowControl( "if _ ",        "then", "else\nfi", "a" )i
inoremap <buffer> <silent> \si :call BASH_FlowControl( "if _ ",        "then", "fi",       "a" )i
inoremap <buffer> <silent> \sf :call BASH_FlowControl( "for _ in ",    "do",   "done",     "a" )i
inoremap <buffer> <silent> \sl oelif then1kA
inoremap <buffer> <silent> \sc ocase  in);;);;*);;esac    # --- end of case ---11kf a
inoremap <buffer> <silent> \ct =BASH_InsertDateAndTime('dt')
inoremap <buffer> <silent> \cd =BASH_InsertDateAndTime('d')
inoremap <buffer> <silent> \ch :call BASH_CommentTemplates('header')
inoremap <buffer> <silent> \cfu :call BASH_CommentTemplates('function')
inoremap <buffer> <silent> \cfr :call BASH_CommentTemplates('frame')
inoremap <buffer> <silent> \cj :call BASH_AdjustLineEndComm("a")
inoremap <buffer> <silent> \cl :call BASH_MultiLineEndComments()A
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal comments=://,b:#,:!,n:>,fb:-,fb:*
setlocal commentstring=#%s
setlocal complete=.,w,b,u,t,i
setlocal completefunc=tskeleton#Complete
setlocal nocopyindent
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=~/.vim/bash-support/wordlists/bash.list
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'sh'
setlocal filetype=sh
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=syntax
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=XMLFoldLabel()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetShIndent()
setlocal indentkeys=!^F,o,O,0(,0),=~begin,=~end\ ,=~end\	,=~is,=~select,=~when,=~if,=~then,=~elsif,=~else,=~case,=~loop,=~for,=~generate,=~record,=~units,=~process,=~block,=~function,=~component,=~procedure,=~architecture,=~configuration,=~entity,=~package,=then,=do,=else,=elif,=esac,=fi,=fin,=fil,=done
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,i,f,e,l,o,r
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal nomodeline
setlocal modifiable
setlocal nrformats=alpha,hex
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'sh'
setlocal syntax=sh
endif
setlocal tabstop=8
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
let s:l = 8 - ((7 * winheight(0) + 30) / 61)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
8
normal! 014l
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
" vim: set ft=vim :
